# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: instaminer.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, List

import betterproto
import grpclib


@dataclass
class EchoRequest(betterproto.Message):
    value: str = betterproto.string_field(1)
    extra_times: int = betterproto.uint32_field(2)


@dataclass
class EchoResponse(betterproto.Message):
    values: List[str] = betterproto.string_field(1)


@dataclass
class EchoStreamResponse(betterproto.Message):
    value: str = betterproto.string_field(1)


@dataclass
class AboutMe(betterproto.Message):
    worker_name: str = betterproto.string_field(1)
    last_instagram_load: str = betterproto.string_field(2)
    session_longevity: str = betterproto.string_field(3)
    daemon_starts_at: str = betterproto.string_field(4)
    last_search: str = betterproto.string_field(5)


@dataclass
class AvailableTask(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    parent_task_id: str = betterproto.string_field(6)
    search_query: str = betterproto.string_field(2)
    from_date: str = betterproto.string_field(3)
    to_date: str = betterproto.string_field(4)
    expected_time: int = betterproto.int64_field(5)


@dataclass
class SelectedTask(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    parent_task_id: str = betterproto.string_field(6)


@dataclass
class PostResult(betterproto.Message):
    id: str = betterproto.string_field(1)
    date: str = betterproto.string_field(2)
    hashtags: str = betterproto.string_field(3)
    mentions: str = betterproto.string_field(4)
    image_uri: str = betterproto.string_field(5)
    likes: int = betterproto.int64_field(6)
    comments: int = betterproto.int64_field(7)
    relevance: float = betterproto.float_field(8)
    description: str = betterproto.string_field(9)
    comments_content: str = betterproto.string_field(10)


class EchoStub(betterproto.ServiceStub):
    async def request_new_task(
        self,
        *,
        worker_name: str = "",
        last_instagram_load: str = "",
        session_longevity: str = "",
        daemon_starts_at: str = "",
        last_search: str = "",
    ) -> AvailableTask:
        request = AboutMe()
        request.worker_name = worker_name
        request.last_instagram_load = last_instagram_load
        request.session_longevity = session_longevity
        request.daemon_starts_at = daemon_starts_at
        request.last_search = last_search

        return await self._unary_unary(
            "/instaminer.Echo/RequestNewTask",
            request,
            AvailableTask,
        )

    async def response_task(
        self, *, task_id: str = "", parent_task_id: str = ""
    ) -> AsyncGenerator[PostResult, None]:
        request = SelectedTask()
        request.task_id = task_id
        request.parent_task_id = parent_task_id

        async for response in self._unary_stream(
            "/instaminer.Echo/ResponseTask",
            request,
            PostResult,
        ):
            yield response
